. Senarai Komponen
ðŸ›  Perkakasan
ESP32 â€“ Mikropengawal utama dengan WiFi
Relay 5V (Single Channel) â€“ Untuk menghidupkan/mematikan kipas
Kipas (12V/220V) â€“ Peranti yang akan dikawal
HC-SR04 Ultrasonic Sensor â€“ Untuk mengesan pergerakan/kehadiran manusia
DHT11/DHT22 â€“ Untuk mengukur suhu dan kelembapan
Bekalan Kuasa (5V untuk ESP32, 12V/220V untuk kipas)
Wayar jumper & breadboard
ðŸ“Œ 2. Konsep Sistem
Sistem ini akan mempunyai dua mod operasi:
âœ… Mod Automatik

Kipas hidup jika suhu > 25Â°C
Kipas hidup jika HC-SR04 mengesan objek dalam jarak tertentu (contoh: < 50cm)
Kipas mati jika tiada pergerakan dalam tempoh tertentu atau suhu turun
âœ… Mod Manual (IoT Control via ThingsBoard)

Pengguna boleh hidup/matikan kipas dari ThingsBoard
Dashboard ThingsBoard akan paparkan data suhu, kelembapan, jarak dan status kipas

Sambungan Litar
ESP32       â†’  Relay
GPIO 25     â†’  IN Relay
GND         â†’  GND
3.3V        â†’  VCC

ESP32       â†’  HC-SR04
GPIO 26     â†’  TRIG
GPIO 27     â†’  ECHO
GND         â†’  GND
3.3V        â†’  VCC

ESP32       â†’  DHT11/DHT22
GPIO 32     â†’  Data DHT
GND         â†’  GND
3.3V        â†’  VCC

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
KODING

#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

// WiFi Credentials
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";

// ThingsBoard MQTT
const char* mqttServer = "demo.thingsboard.io";
const int mqttPort = 1883;
const char* token = "YOUR_DEVICE_ACCESS_TOKEN";

WiFiClient espClient;
PubSubClient client(espClient);

// Pin Definitions
#define DHTPIN 32
#define DHTTYPE DHT11
#define TRIG_PIN 26
#define ECHO_PIN 27
#define RELAY_PIN 25

DHT dht(DHTPIN, DHTTYPE);
bool manualControl = false;
bool fanState = false;
float tempThreshold = 25.0;  // Suhu ambang
int distanceThreshold = 50;  // Jarak ambang dalam cm

void callback(char* topic, byte* payload, unsigned int length) {
    String message = "";
    for (int i = 0; i < length; i++) {
        message += (char)payload[i];
    }

    if (String(topic) == "v1/devices/me/attributes") {
        if (message == "manual_on") {
            manualControl = true;
            fanState = true;
        } else if (message == "manual_off") {
            manualControl = true;
            fanState = false;
        } else if (message == "auto_mode") {
            manualControl = false;
        }
    }
}

void setup() {
    Serial.begin(115200);
    WiFi.begin(ssid, password);
    
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting...");
    }
    Serial.println("WiFi Connected");

    client.setServer(mqttServer, mqttPort);
    client.setCallback(callback);

    while (!client.connected()) {
        if (client.connect("ESP32", token, NULL)) {
            Serial.println("Connected to ThingsBoard");
            client.subscribe("v1/devices/me/attributes");
        } else {
            delay(2000);
        }
    }

    pinMode(RELAY_PIN, OUTPUT);
    pinMode(TRIG_PIN, OUTPUT);
    pinMode(ECHO_PIN, INPUT);
    dht.begin();
}

float getDistance() {
    digitalWrite(TRIG_PIN, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_PIN, LOW);
    long duration = pulseIn(ECHO_PIN, HIGH);
    return duration * 0.034 / 2;  // Kira jarak dalam cm
}

void loop() {
    if (!client.connected()) {
        while (!client.connected()) {
            client.connect("ESP32", token, NULL);
            delay(1000);
        }
    }
    
    float temp = dht.readTemperature();
    float hum = dht.readHumidity();
    float distance = getDistance();

    if (!manualControl) {
        if (temp > tempThreshold || distance < distanceThreshold) {
            fanState = true;
        } else {
            fanState = false;
        }
    }

    digitalWrite(RELAY_PIN, fanState ? HIGH : LOW);

    String payload = "{\"temperature\": " + String(temp) + 
                     ", \"humidity\": " + String(hum) + 
                     ", \"distance\": " + String(distance) + 
                     ", \"fan_state\": " + String(fanState) + "}";
    client.publish("v1/devices/me/telemetry", payload.c_str());

    Serial.println(payload);
    client.loop();
    delay(5000);
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5. Konfigurasi ThingsBoard
Login ke ThingsBoard Cloud â†’ https://demo.thingsboard.io
Pergi ke Devices â†’ Add New Device
Pilih Device Type: ESP32 dan enable "Is Gateway?"
Salin Access Token dan masukkan dalam kod ESP32
Pergi ke Dashboard â†’ Add Widget
Tambah:
Gauge untuk suhu dan kelembapan
Switch untuk menghidupkan/mematikan kipas secara manual
Graph untuk log jarak dan suhu dari masa ke masa
